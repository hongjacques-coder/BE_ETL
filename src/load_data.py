"""
Module de Chargement des Donn√©es

Ce module g√®re le chargement des donn√©es finales et enrichies
dans la base de donn√©es PostgreSQL. Il contient aussi des fonctions
de v√©rification pour s'assurer que tout a bien fonctionn√©.
"""

import pandas as pd
from sqlalchemy import create_engine, text
import sys # Pour afficher les erreurs

# --- CONFIGURATION REQUISE ---
# Comme indiqu√© dans le README, modifiez ces valeurs
# pour correspondre √† votre configuration PostgreSQL.
DATABASE_CONFIG = {
    'username': 'jacques',      # <-- REMPLACEZ PAR VOTRE NOM D'UTILISATEUR
    'password': 'Noixcoco1704', # <-- REMPLACEZ PAR VOTRE MOT DE PASSE
    'host': 'localhost',
    'port': '5432',
    'database': 'stations_db'
}
# ------------------------------

def get_connection_string():
    """Construit l'URL de connexion √† PostgreSQL."""
    return (
        f"postgresql://{DATABASE_CONFIG['username']}:{DATABASE_CONFIG['password']}"
        f"@{DATABASE_CONFIG['host']}:{DATABASE_CONFIG['port']}/{DATABASE_CONFIG['database']}"
    )

def load_to_database(df):
    """
    Charge le DataFrame final et enrichi dans la table 'stations' de PostgreSQL.
    """
    if df.empty or not isinstance(df, pd.DataFrame):
        print("‚ö†Ô∏è DataFrame vide ou invalide. Aucune donn√©e √† charger.")
        return

    print(f"üíæ Chargement de {len(df)} lignes vers la base de donn√©es...")
    
    try:
        connection_string = get_connection_string()
        engine = create_engine(connection_string)
        
        # if_exists='replace' : supprime la table si elle existe et la recr√©e.
        # C'est parfait pour un pipeline ETL qui tourne r√©guli√®rement.
        df.to_sql(
            'stations', 
            engine, 
            if_exists='replace', 
            index=False
        )
        print("‚úÖ Chargement termin√© avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå ERREUR pendant le chargement des donn√©es : {e}", file=sys.stderr)
        print("üí° Assurez-vous que PostgreSQL est d√©marr√© et que vos identifiants "
              "dans DATABASE_CONFIG sont corrects.", file=sys.stderr)

def verify_data():
    """
    Ex√©cute des requ√™tes SQL pour v√©rifier que les donn√©es sont
    bien dans la base et pour montrer des analyses int√©ressantes.
    """
    print("\nüîç V√©rification des donn√©es dans la base...")
    
    try:
        connection_string = get_connection_string()
        engine = create_engine(connection_string)

        # Requ√™te 1: Compter le nombre total de stations charg√©es
        count_query = "SELECT COUNT(*) as total_stations FROM stations;"
        total_stations = pd.read_sql(count_query, engine).iloc[0]['total_stations']
        print(f"üìä Nombre total de stations dans la base : {total_stations}")
        
        # Requ√™te 2: Montrer les 5 stations les mieux connect√©es aux bus
        bus_query = """
        SELECT name, bus_stops_nearby_200m
        FROM stations
        ORDER BY bus_stops_nearby_200m DESC
        LIMIT 5;
        """
        top_bus_stations = pd.read_sql(bus_query, engine)
        print("\nüöç Top 5 des stations les mieux desservies par les bus (√† 200m) :")
        print(top_bus_stations.to_string(index=False))
        
        # Requ√™te 3: Montrer les 5 stations les mieux connect√©es aux m√©tros
        metro_query = """
        SELECT name, metro_stations_nearby_500m
        FROM stations
        ORDER BY metro_stations_nearby_500m DESC
        LIMIT 5;
        """
        top_metro_stations = pd.read_sql(metro_query, engine)
        print("\nüöá Top 5 des stations les mieux desservies par le m√©tro (√† 500m) :")
        print(top_metro_stations.to_string(index=False))

    except Exception as e:
        print(f"‚ùå ERREUR pendant la v√©rification des donn√©es : {e}", file=sys.stderr)
        print("üí° La table 'stations' existe-t-elle ? Avez-vous ex√©cut√© 'database_setup.sql' ?", file=sys.stderr)

def test_database_connection():
    """
    Teste la connexion √† la base de donn√©es sans charger de donn√©es.
    """
    print("üîå Test de la connexion √† la base de donn√©es...")
    
    try:
        connection_string = get_connection_string()
        engine = create_engine(connection_string)
        
        # Essayer une requ√™te simple
        result = pd.read_sql("SELECT 1 as test", engine)
        
        if result.iloc[0]['test'] == 1:
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie !")
            
            # V√©rifier si notre table 'stations' existe
            tables_query = """
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'stations';
            """
            tables = pd.read_sql(tables_query, engine)
            
            if len(tables) == 1:
                print("‚úÖ La table 'stations' existe.")
            else:
                print(f"‚ö†Ô∏è  Table 'stations' non trouv√©e.")
                print("üí° Ex√©cutez 'database_setup.sql' pour cr√©er la table.")
            
            return True
        else:
            print("‚ùå Test de connexion √† la base de donn√©es √©chou√© (la requ√™te n'a pas retourn√© 1).", file=sys.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå √âchec de la connexion √† la base de donn√©es : {e}", file=sys.stderr)
        print("üí° V√©rifiez vos param√®tres dans DATABASE_CONFIG.", file=sys.stderr)
        return False

# --- Bloc de Test ---
if __name__ == "__main__":
    """
    Teste le module de chargement quand on ex√©cute ce fichier directement :
    python src/load_data.py
    """
    print("üß™ Test du module de chargement (Load)...\n")
    
    # 1. Tester la connexion
    if test_database_connection():
        print("\nConnexion OK. Test de chargement de donn√©es factices...")
        
        # 2. Cr√©er un petit DataFrame factice pour le test
        dummy_df = pd.DataFrame({
            'number': [9999], 'name': ['Station Test'], 'address': ['123 Rue du Test'],
            'available_bikes': [10], 'available_bike_stands': [5], 'status': ['OPEN'],
            'position_lat': [43.6], 'position_lon': [1.44], 
            'last_updated': [pd.to_datetime('now', utc=True)],
            'metro_stations_nearby_500m': [1], 'bus_stops_nearby_200m': [3]
        })
        
        # 3. Lancer le chargement et la v√©rification
        load_to_database(dummy_df)
        verify_data()
    else:
        print("\n‚ùå √âchec du test de connexion. Corrigez les param√®tres dans DATABASE_CONFIG.")
    
    print("\n‚úÖ Test de 'load_data.py' termin√©.")