#!/usr/bin/env python3
"""
Pipeline ETL "Baby Google Maps" (Projet BE)

Ce script ex√©cute le pipeline ETL complet :
1. Extrait les donn√©es "live" des stations de v√©lo (API JCDecaux).
2. Extrait les donn√©es "statiques" des arr√™ts de m√©tro et de bus (fichiers GTFS).
3. Transforme les donn√©es des v√©los en les nettoyant.
4. Enrichit les donn√©es des v√©los avec une analyse g√©ospatiale (proximit√© des bus/m√©tros).
5. Charge le DataFrame final et enrichi dans la base de donn√©es PostgreSQL.
6. V√©rifie les donn√©es en ex√©cutant des requ√™tes d'analyse.

Ex√©cuter avec : python main.py
"""

# --- Importations ---
# 1. Extraction
from src.extract_data import extract_stations
from src.extract_tisseo import extract_metro_stations, extract_bus_stops

# 2. Transformation
from src.transform_data import transform_data # <-- Remplacer clean_stations par transform_data

# 3. Chargement et V√©rification
from src.load_data import load_to_database, verify_data

def main():
    """Ex√©cute le pipeline ETL complet"""
    print("üö≤ D√©marrage du pipeline ETL 'Baby Google Maps'...")
    print("=" * 50)
    
    # --- √âTAPE 1: EXTRACTION ---
    print("\n=== EXTRACTION ===")
    print("üì• Extraction des donn√©es sources...")
    
    # Appeler les 3 fonctions d'extraction
    stations_df = extract_stations()
    poi_metro_df = extract_metro_stations()
    poi_bus_df = extract_bus_stops()
    
    # --- √âTAPE 2: TRANSFORMATION ---
    print("\n=== TRANSFORMATION ===")
    print("üîÑ Nettoyage, transformation et enrichissement des donn√©es...")
    
    # Appeler la nouvelle fonction de transformation
    # Elle prend 3 DataFrames en entr√©e
    cleaned_enriched_df = transform_data(stations_df, poi_metro_df, poi_bus_df)
    

    print("\n--- Aper√ßu des 100 premi√®res lignes enrichies ---")
    print(cleaned_enriched_df.head(10))
   


    # --- √âTAPE 3: CHARGEMENT (LOAD) ---
    print("\n=== CHARGEMENT (LOAD) ===")
    print("üíæ Chargement des donn√©es enrichies vers la base de donn√©es...")
    
    
    load_to_database(cleaned_enriched_df)
    
    # --- √âTAPE 4: V√âRIFICATION ---
    print("\n=== V√âRIFICATION ===")
    print("‚úÖ V√©rification des donn√©es et ex√©cution des analyses...")
    
    
    verify_data()
    
    print("\nüéâ Pipeline ETL termin√© avec succ√®s !")
    print("=" * 50)

if __name__ == "__main__":
    main()